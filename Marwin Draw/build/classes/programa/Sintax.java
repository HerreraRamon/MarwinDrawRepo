
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 06 13:57:13 MDT 2022
//----------------------------------------------------

package programa;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 06 13:57:13 MDT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\002\011\000\002\002\012\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\004\005\000\002\004\007\000\002\004\007\000\002\004" +
    "\006\000\002\004\006\000\002\004\005\000\002\004\007" +
    "\000\002\004\007\000\002\004\006\000\002\004\006\000" +
    "\002\004\010\000\002\004\010\000\002\004\011\000\002" +
    "\004\011\000\002\004\012\000\002\004\007\000\002\004" +
    "\010\000\002\006\011\000\002\013\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\006\000" +
    "\002\013\007\000\002\007\015\000\002\010\011\000\002" +
    "\011\013\000\002\012\011\000\002\014\012\000\002\014" +
    "\011\000\002\015\020\000\002\005\005\000\002\005\004" +
    "\000\002\005\004\000\002\017\003\000\002\017\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\020\011\000\002\021\005\000\002\021" +
    "\003\000\002\022\013\000\002\022\011\000\002\022\013" +
    "\000\002\022\011\000\002\027\006\000\002\030\004\000" +
    "\002\030\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\024\011\000\002\024\010\000\002\025" +
    "\005\000\002\025\004\000\002\026\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\006\007\006\036\004\001\002\000\004\030" +
    "\357\001\002\000\004\002\356\001\002\000\004\036\007" +
    "\001\002\000\004\030\010\001\002\000\004\031\011\001" +
    "\002\000\004\032\012\001\002\000\040\006\030\007\026" +
    "\010\034\011\041\013\042\014\044\015\015\043\017\044" +
    "\024\045\045\046\013\050\035\051\032\056\036\060\021" +
    "\001\002\000\004\030\uffb4\001\002\000\004\030\337\001" +
    "\002\000\004\030\304\001\002\000\042\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\013\uffef\014\uffef\015\uffef\033\uffef\043" +
    "\uffef\044\uffef\045\uffef\046\uffef\050\uffef\051\uffef\056\uffef" +
    "\060\uffef\001\002\000\004\030\276\001\002\000\042\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\033\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\050\ufff5\051" +
    "\ufff5\056\ufff5\060\ufff5\001\002\000\004\030\270\001\002" +
    "\000\042\006\030\007\026\010\034\011\041\013\042\014" +
    "\044\015\015\033\250\043\017\044\024\045\045\046\013" +
    "\050\035\051\032\056\036\060\021\001\002\000\042\006" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\033\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\050\ufffb\051" +
    "\ufffb\056\ufffb\060\ufffb\001\002\000\004\030\uffb6\001\002" +
    "\000\042\006\ufff9\007\ufff9\010\ufff9\011\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\033\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9" +
    "\050\ufff9\051\ufff9\056\ufff9\060\ufff9\001\002\000\006\026" +
    "\233\055\234\001\002\000\042\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\013\ufff7\014\ufff7\015\ufff7\033\ufff7\043\ufff7\044" +
    "\ufff7\045\ufff7\046\ufff7\050\ufff7\051\ufff7\056\ufff7\060\ufff7" +
    "\001\002\000\006\026\177\055\200\001\002\000\042\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\013\uffed\014\uffed\015\uffed" +
    "\033\uffed\043\uffed\044\uffed\045\uffed\046\uffed\050\uffed\051" +
    "\uffed\056\uffed\060\uffed\001\002\000\004\055\170\001\002" +
    "\000\042\006\uffe9\007\uffe9\010\uffe9\011\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\033\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9" +
    "\050\uffe9\051\uffe9\056\uffe9\060\uffe9\001\002\000\004\055" +
    "\151\001\002\000\004\030\uffb5\001\002\000\004\006\137" +
    "\001\002\000\042\006\ufff3\007\ufff3\010\ufff3\011\ufff3\013" +
    "\ufff3\014\ufff3\015\ufff3\033\ufff3\043\ufff3\044\ufff3\045\ufff3" +
    "\046\ufff3\050\ufff3\051\ufff3\056\ufff3\060\ufff3\001\002\000" +
    "\042\006\uffeb\007\uffeb\010\uffeb\011\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\033\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\050" +
    "\uffeb\051\uffeb\056\uffeb\060\uffeb\001\002\000\004\030\125" +
    "\001\002\000\004\032\115\001\002\000\042\006\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\013\ufff1\014\ufff1\015\ufff1\033\ufff1" +
    "\043\ufff1\044\ufff1\045\ufff1\046\ufff1\050\ufff1\051\ufff1\056" +
    "\ufff1\060\ufff1\001\002\000\004\030\063\001\002\000\004" +
    "\030\046\001\002\000\010\052\051\055\052\057\047\001" +
    "\002\000\006\031\uffc5\054\uffc5\001\002\000\004\054\057" +
    "\001\002\000\004\054\053\001\002\000\006\031\uffc6\054" +
    "\uffc6\001\002\000\006\055\052\057\047\001\002\000\004" +
    "\031\055\001\002\000\004\054\056\001\002\000\042\006" +
    "\uffba\007\uffba\010\uffba\011\uffba\013\uffba\014\uffba\015\uffba" +
    "\033\uffba\043\uffba\044\uffba\045\uffba\046\uffba\050\uffba\051" +
    "\uffba\056\uffba\060\uffba\001\002\000\006\055\052\057\047" +
    "\001\002\000\004\031\061\001\002\000\004\054\062\001" +
    "\002\000\042\006\uffbc\007\uffbc\010\uffbc\011\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\033\uffbc\043\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\050\uffbc\051\uffbc\056\uffbc\060\uffbc\001\002\000\006" +
    "\027\065\055\066\001\002\000\004\031\077\001\002\000" +
    "\006\031\uffd6\054\uffd6\001\002\000\004\024\067\001\002" +
    "\000\012\005\071\027\072\055\073\057\070\001\002\000" +
    "\006\031\uffd4\054\uffd4\001\002\000\006\005\074\055\075" +
    "\001\002\000\006\031\uffd5\054\uffd5\001\002\000\006\031" +
    "\uffd3\054\uffd3\001\002\000\006\031\uffd2\054\uffd2\001\002" +
    "\000\004\005\076\001\002\000\006\031\uffd1\054\uffd1\001" +
    "\002\000\004\032\100\001\002\000\040\006\030\007\026" +
    "\010\034\011\041\013\042\014\044\015\015\043\017\044" +
    "\024\045\045\046\013\050\035\051\032\056\036\060\021" +
    "\001\002\000\042\006\030\007\026\010\034\011\041\013" +
    "\042\014\044\015\015\033\106\043\017\044\024\045\045" +
    "\046\013\050\035\051\032\056\036\060\021\001\002\000" +
    "\042\006\ufff0\007\ufff0\010\ufff0\011\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\033\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\050" +
    "\ufff0\051\ufff0\056\ufff0\060\ufff0\001\002\000\042\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\013\ufff6\014\ufff6\015\ufff6\033" +
    "\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\050\ufff6\051\ufff6" +
    "\056\ufff6\060\ufff6\001\002\000\042\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\013\ufffc\014\ufffc\015\ufffc\033\ufffc\043\ufffc" +
    "\044\ufffc\045\ufffc\046\ufffc\050\ufffc\051\ufffc\056\ufffc\060" +
    "\ufffc\001\002\000\042\006\ufffa\007\ufffa\010\ufffa\011\ufffa" +
    "\013\ufffa\014\ufffa\015\ufffa\033\ufffa\043\ufffa\044\ufffa\045" +
    "\ufffa\046\ufffa\050\ufffa\051\ufffa\056\ufffa\060\ufffa\001\002" +
    "\000\042\006\uffcf\007\uffcf\010\uffcf\011\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\033\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\050\uffcf\051\uffcf\056\uffcf\060\uffcf\001\002\000\042\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\033\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\050\ufff8\051" +
    "\ufff8\056\ufff8\060\ufff8\001\002\000\042\006\uffee\007\uffee" +
    "\010\uffee\011\uffee\013\uffee\014\uffee\015\uffee\033\uffee\043" +
    "\uffee\044\uffee\045\uffee\046\uffee\050\uffee\051\uffee\056\uffee" +
    "\060\uffee\001\002\000\042\006\uffea\007\uffea\010\uffea\011" +
    "\uffea\013\uffea\014\uffea\015\uffea\033\uffea\043\uffea\044\uffea" +
    "\045\uffea\046\uffea\050\uffea\051\uffea\056\uffea\060\uffea\001" +
    "\002\000\042\006\ufff4\007\ufff4\010\ufff4\011\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\033\ufff4\043\ufff4\044\ufff4\045\ufff4\046" +
    "\ufff4\050\ufff4\051\ufff4\056\ufff4\060\ufff4\001\002\000\042" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\013\uffec\014\uffec\015" +
    "\uffec\033\uffec\043\uffec\044\uffec\045\uffec\046\uffec\050\uffec" +
    "\051\uffec\056\uffec\060\uffec\001\002\000\042\006\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\013\ufff2\014\ufff2\015\ufff2\033\ufff2" +
    "\043\ufff2\044\ufff2\045\ufff2\046\ufff2\050\ufff2\051\ufff2\056" +
    "\ufff2\060\ufff2\001\002\000\040\006\030\007\026\010\034" +
    "\011\041\013\042\014\044\015\015\043\017\044\024\045" +
    "\045\046\013\050\035\051\032\056\036\060\021\001\002" +
    "\000\042\006\030\007\026\010\034\011\041\013\042\014" +
    "\044\015\015\033\117\043\017\044\024\045\045\046\013" +
    "\050\035\051\032\056\036\060\021\001\002\000\004\014" +
    "\120\001\002\000\004\030\121\001\002\000\006\027\065" +
    "\055\066\001\002\000\004\031\123\001\002\000\004\054" +
    "\124\001\002\000\042\006\uffce\007\uffce\010\uffce\011\uffce" +
    "\013\uffce\014\uffce\015\uffce\033\uffce\043\uffce\044\uffce\045" +
    "\uffce\046\uffce\050\uffce\051\uffce\056\uffce\060\uffce\001\002" +
    "\000\006\027\065\055\066\001\002\000\004\031\127\001" +
    "\002\000\004\032\130\001\002\000\040\006\030\007\026" +
    "\010\034\011\041\013\042\014\044\015\015\043\017\044" +
    "\024\045\045\046\013\050\035\051\032\056\036\060\021" +
    "\001\002\000\042\006\030\007\026\010\034\011\041\013" +
    "\042\014\044\015\015\033\132\043\017\044\024\045\045" +
    "\046\013\050\035\051\032\056\036\060\021\001\002\000" +
    "\044\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\133\013\uffd7" +
    "\014\uffd7\015\uffd7\033\uffd7\043\uffd7\044\uffd7\045\uffd7\046" +
    "\uffd7\050\uffd7\051\uffd7\056\uffd7\060\uffd7\001\002\000\004" +
    "\032\134\001\002\000\040\006\030\007\026\010\034\011" +
    "\041\013\042\014\044\015\015\043\017\044\024\045\045" +
    "\046\013\050\035\051\032\056\036\060\021\001\002\000" +
    "\042\006\030\007\026\010\034\011\041\013\042\014\044" +
    "\015\015\033\136\043\017\044\024\045\045\046\013\050" +
    "\035\051\032\056\036\060\021\001\002\000\042\006\uffd0" +
    "\007\uffd0\010\uffd0\011\uffd0\013\uffd0\014\uffd0\015\uffd0\033" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\050\uffd0\051\uffd0" +
    "\056\uffd0\060\uffd0\001\002\000\004\055\140\001\002\000" +
    "\004\016\141\001\002\000\004\034\142\001\002\000\004" +
    "\055\143\001\002\000\006\035\uffbe\054\147\001\002\000" +
    "\004\035\145\001\002\000\004\054\146\001\002\000\042" +
    "\006\uffda\007\uffda\010\uffda\011\uffda\013\uffda\014\uffda\015" +
    "\uffda\033\uffda\043\uffda\044\uffda\045\uffda\046\uffda\050\uffda" +
    "\051\uffda\056\uffda\060\uffda\001\002\000\004\055\143\001" +
    "\002\000\004\035\uffbf\001\002\000\006\016\153\025\152" +
    "\001\002\000\004\005\162\001\002\000\004\005\154\001" +
    "\002\000\006\005\155\055\156\001\002\000\004\054\161" +
    "\001\002\000\004\005\157\001\002\000\004\054\160\001" +
    "\002\000\042\006\uffdb\007\uffdb\010\uffdb\011\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\033\uffdb\043\uffdb\044\uffdb\045\uffdb\046" +
    "\uffdb\050\uffdb\051\uffdb\056\uffdb\060\uffdb\001\002\000\042" +
    "\006\uffdd\007\uffdd\010\uffdd\011\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\033\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\050\uffdd" +
    "\051\uffdd\056\uffdd\060\uffdd\001\002\000\006\005\163\055" +
    "\164\001\002\000\004\054\167\001\002\000\004\005\165" +
    "\001\002\000\004\054\166\001\002\000\042\006\uffdc\007" +
    "\uffdc\010\uffdc\011\uffdc\013\uffdc\014\uffdc\015\uffdc\033\uffdc" +
    "\043\uffdc\044\uffdc\045\uffdc\046\uffdc\050\uffdc\051\uffdc\056" +
    "\uffdc\060\uffdc\001\002\000\042\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\013\uffde\014\uffde\015\uffde\033\uffde\043\uffde\044" +
    "\uffde\045\uffde\046\uffde\050\uffde\051\uffde\056\uffde\060\uffde" +
    "\001\002\000\004\030\171\001\002\000\010\031\173\055" +
    "\052\057\047\001\002\000\004\031\175\001\002\000\004" +
    "\054\174\001\002\000\042\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\033\uffd9\043\uffd9\044\uffd9" +
    "\045\uffd9\046\uffd9\050\uffd9\051\uffd9\056\uffd9\060\uffd9\001" +
    "\002\000\004\054\176\001\002\000\042\006\uffd8\007\uffd8" +
    "\010\uffd8\011\uffd8\013\uffd8\014\uffd8\015\uffd8\033\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\046\uffd8\050\uffd8\051\uffd8\056\uffd8" +
    "\060\uffd8\001\002\000\004\055\231\001\002\000\012\016" +
    "\204\025\201\026\203\054\202\001\002\000\004\057\227" +
    "\001\002\000\042\006\uffe3\007\uffe3\010\uffe3\011\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\033\uffe3\043\uffe3\044\uffe3\045\uffe3" +
    "\046\uffe3\050\uffe3\051\uffe3\056\uffe3\060\uffe3\001\002\000" +
    "\004\054\226\001\002\000\014\037\211\040\212\041\210" +
    "\042\206\057\205\001\002\000\004\054\225\001\002\000" +
    "\004\030\uffc1\001\002\000\004\030\213\001\002\000\004" +
    "\030\uffc2\001\002\000\004\030\uffc4\001\002\000\004\030" +
    "\uffc3\001\002\000\006\055\052\057\047\001\002\000\004" +
    "\054\215\001\002\000\006\055\052\057\047\001\002\000" +
    "\004\054\217\001\002\000\006\055\052\057\047\001\002" +
    "\000\004\054\221\001\002\000\006\055\052\057\047\001" +
    "\002\000\004\031\223\001\002\000\004\054\224\001\002" +
    "\000\042\006\uffca\007\uffca\010\uffca\011\uffca\013\uffca\014" +
    "\uffca\015\uffca\033\uffca\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\050\uffca\051\uffca\056\uffca\060\uffca\001\002\000\042\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\033\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\050\uffe1\051" +
    "\uffe1\056\uffe1\060\uffe1\001\002\000\042\006\uffe0\007\uffe0" +
    "\010\uffe0\011\uffe0\013\uffe0\014\uffe0\015\uffe0\033\uffe0\043" +
    "\uffe0\044\uffe0\045\uffe0\046\uffe0\050\uffe0\051\uffe0\056\uffe0" +
    "\060\uffe0\001\002\000\004\054\230\001\002\000\042\006" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\033\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\050\uffe2\051" +
    "\uffe2\056\uffe2\060\uffe2\001\002\000\004\054\232\001\002" +
    "\000\042\006\uffdf\007\uffdf\010\uffdf\011\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\033\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf" +
    "\050\uffdf\051\uffdf\056\uffdf\060\uffdf\001\002\000\004\055" +
    "\246\001\002\000\012\016\240\025\235\026\237\054\236" +
    "\001\002\000\004\057\244\001\002\000\042\006\uffe8\007" +
    "\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8\015\uffe8\033\uffe8" +
    "\043\uffe8\044\uffe8\045\uffe8\046\uffe8\050\uffe8\051\uffe8\056" +
    "\uffe8\060\uffe8\001\002\000\004\054\243\001\002\000\004" +
    "\057\241\001\002\000\004\054\242\001\002\000\042\006" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\033\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\050\uffe6\051" +
    "\uffe6\056\uffe6\060\uffe6\001\002\000\042\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\013\uffe5\014\uffe5\015\uffe5\033\uffe5\043" +
    "\uffe5\044\uffe5\045\uffe5\046\uffe5\050\uffe5\051\uffe5\056\uffe5" +
    "\060\uffe5\001\002\000\004\054\245\001\002\000\042\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\033\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\050\uffe7\051" +
    "\uffe7\056\uffe7\060\uffe7\001\002\000\004\054\247\001\002" +
    "\000\042\006\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\033\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4" +
    "\050\uffe4\051\uffe4\056\uffe4\060\uffe4\001\002\000\006\002" +
    "\000\055\252\001\002\000\004\002\ufffd\001\002\000\004" +
    "\030\253\001\002\000\006\006\254\031\256\001\002\000" +
    "\004\055\266\001\002\000\004\031\262\001\002\000\004" +
    "\032\257\001\002\000\040\006\030\007\026\010\034\011" +
    "\041\013\042\014\044\015\015\043\017\044\024\045\045" +
    "\046\013\050\035\051\032\056\036\060\021\001\002\000" +
    "\042\006\030\007\026\010\034\011\041\013\042\014\044" +
    "\015\015\033\261\043\017\044\024\045\045\046\013\050" +
    "\035\051\032\056\036\060\021\001\002\000\004\002\uffb2" +
    "\001\002\000\004\032\263\001\002\000\040\006\030\007" +
    "\026\010\034\011\041\013\042\014\044\015\015\043\017" +
    "\044\024\045\045\046\013\050\035\051\032\056\036\060" +
    "\021\001\002\000\042\006\030\007\026\010\034\011\041" +
    "\013\042\014\044\015\015\033\265\043\017\044\024\045" +
    "\045\046\013\050\035\051\032\056\036\060\021\001\002" +
    "\000\004\002\uffb3\001\002\000\006\006\254\031\uffb0\001" +
    "\002\000\004\031\uffb1\001\002\000\006\055\052\057\047" +
    "\001\002\000\004\054\272\001\002\000\006\055\052\057" +
    "\047\001\002\000\004\031\274\001\002\000\004\054\275" +
    "\001\002\000\042\006\uffaf\007\uffaf\010\uffaf\011\uffaf\013" +
    "\uffaf\014\uffaf\015\uffaf\033\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\046\uffaf\050\uffaf\051\uffaf\056\uffaf\060\uffaf\001\002\000" +
    "\006\055\052\057\047\001\002\000\004\054\300\001\002" +
    "\000\006\055\052\057\047\001\002\000\004\031\302\001" +
    "\002\000\004\054\303\001\002\000\042\006\uffc0\007\uffc0" +
    "\010\uffc0\011\uffc0\013\uffc0\014\uffc0\015\uffc0\033\uffc0\043" +
    "\uffc0\044\uffc0\045\uffc0\046\uffc0\050\uffc0\051\uffc0\056\uffc0" +
    "\060\uffc0\001\002\000\006\006\306\055\307\001\002\000" +
    "\004\031\333\001\002\000\004\055\324\001\002\000\004" +
    "\016\310\001\002\000\004\057\311\001\002\000\004\054" +
    "\312\001\002\000\006\027\065\055\066\001\002\000\004" +
    "\054\314\001\002\000\006\026\316\055\317\001\002\000" +
    "\004\031\uffcb\001\002\000\004\055\323\001\002\000\006" +
    "\025\320\026\321\001\002\000\004\057\322\001\002\000" +
    "\004\031\uffc8\001\002\000\004\031\uffc9\001\002\000\004" +
    "\031\uffc7\001\002\000\004\016\325\001\002\000\004\057" +
    "\326\001\002\000\004\054\327\001\002\000\006\027\065" +
    "\055\066\001\002\000\004\054\331\001\002\000\006\026" +
    "\316\055\317\001\002\000\004\031\uffcc\001\002\000\004" +
    "\032\334\001\002\000\040\006\030\007\026\010\034\011" +
    "\041\013\042\014\044\015\015\043\017\044\024\045\045" +
    "\046\013\050\035\051\032\056\036\060\021\001\002\000" +
    "\042\006\030\007\026\010\034\011\041\013\042\014\044" +
    "\015\015\033\336\043\017\044\024\045\045\046\013\050" +
    "\035\051\032\056\036\060\021\001\002\000\042\006\uffcd" +
    "\007\uffcd\010\uffcd\011\uffcd\013\uffcd\014\uffcd\015\uffcd\033" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\050\uffcd\051\uffcd" +
    "\056\uffcd\060\uffcd\001\002\000\010\052\341\055\052\057" +
    "\047\001\002\000\004\054\350\001\002\000\004\054\342" +
    "\001\002\000\006\055\052\057\047\001\002\000\004\054" +
    "\344\001\002\000\006\055\052\057\047\001\002\000\004" +
    "\031\346\001\002\000\004\054\347\001\002\000\042\006" +
    "\uffbb\007\uffbb\010\uffbb\011\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\033\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\050\uffbb\051" +
    "\uffbb\056\uffbb\060\uffbb\001\002\000\006\055\052\057\047" +
    "\001\002\000\004\054\352\001\002\000\006\055\052\057" +
    "\047\001\002\000\004\031\354\001\002\000\004\054\355" +
    "\001\002\000\042\006\uffbd\007\uffbd\010\uffbd\011\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\033\uffbd\043\uffbd\044\uffbd\045\uffbd" +
    "\046\uffbd\050\uffbd\051\uffbd\056\uffbd\060\uffbd\001\002\000" +
    "\004\002\001\001\002\000\004\031\360\001\002\000\004" +
    "\032\361\001\002\000\040\006\030\007\026\010\034\011" +
    "\041\013\042\014\044\015\015\043\017\044\024\045\045" +
    "\046\013\050\035\051\032\056\036\060\021\001\002\000" +
    "\042\006\030\007\026\010\034\011\041\013\042\014\044" +
    "\015\015\033\363\043\017\044\024\045\045\046\013\050" +
    "\035\051\032\056\036\060\021\001\002\000\006\002\uffff" +
    "\055\252\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\021\004\022\006" +
    "\024\007\026\010\017\011\036\012\042\015\015\020\030" +
    "\022\037\023\013\026\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\004" +
    "\103\006\104\007\106\010\102\011\111\012\113\015\101" +
    "\020\107\022\112\023\013\026\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\100\004\022\006\024\007\026" +
    "\010\017\011\036\012\042\015\015\020\030\022\037\023" +
    "\013\026\032\001\001\000\030\004\103\006\104\007\106" +
    "\010\102\011\111\012\113\015\101\020\107\022\112\023" +
    "\013\026\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\115\004\022\006\024\007\026\010\017\011\036\012\042" +
    "\015\015\020\030\022\037\023\013\026\032\001\001\000" +
    "\030\004\103\006\104\007\106\010\102\011\111\012\113" +
    "\015\101\020\107\022\112\023\013\026\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\130\004\022\006\024\007\026\010\017\011" +
    "\036\012\042\015\015\020\030\022\037\023\013\026\032" +
    "\001\001\000\030\004\103\006\104\007\106\010\102\011" +
    "\111\012\113\015\101\020\107\022\112\023\013\026\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\134\004\022\006\024\007\026\010\017\011\036\012\042" +
    "\015\015\020\030\022\037\023\013\026\032\001\001\000" +
    "\030\004\103\006\104\007\106\010\102\011\111\012\113" +
    "\015\101\020\107\022\112\023\013\026\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\213\001\001\000\002" +
    "\001\001\000\004\017\215\001\001\000\002\001\001\000" +
    "\004\017\217\001\001\000\002\001\001\000\004\017\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\257\004\022\006\024" +
    "\007\026\010\017\011\036\012\042\015\015\020\030\022" +
    "\037\023\013\026\032\001\001\000\030\004\103\006\104" +
    "\007\106\010\102\011\111\012\113\015\101\020\107\022" +
    "\112\023\013\026\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\263\004\022\006\024\007\026\010" +
    "\017\011\036\012\042\015\015\020\030\022\037\023\013" +
    "\026\032\001\001\000\030\004\103\006\104\007\106\010" +
    "\102\011\111\012\113\015\101\020\107\022\112\023\013" +
    "\026\110\001\001\000\002\001\001\000\004\025\266\001" +
    "\001\000\002\001\001\000\004\017\270\001\001\000\002" +
    "\001\001\000\004\017\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\276\001\001" +
    "\000\002\001\001\000\004\017\300\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\312" +
    "\001\001\000\002\001\001\000\004\005\314\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\327\001\001\000\002\001\001\000\004\005" +
    "\331\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\334\004\022\006\024\007\026\010\017\011\036\012" +
    "\042\015\015\020\030\022\037\023\013\026\032\001\001" +
    "\000\030\004\103\006\104\007\106\010\102\011\111\012" +
    "\113\015\101\020\107\022\112\023\013\026\110\001\001" +
    "\000\002\001\001\000\004\017\337\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\342\001\001\000\002" +
    "\001\001\000\004\017\344\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\350\001\001" +
    "\000\002\001\001\000\004\017\352\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\361\004" +
    "\022\006\024\007\026\010\017\011\036\012\042\015\015" +
    "\020\030\022\037\023\013\026\032\001\001\000\030\004" +
    "\103\006\104\007\106\010\102\011\111\012\113\015\101" +
    "\020\107\022\112\023\013\026\110\001\001\000\004\024" +
    "\363\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TABLA ::= Tabla Parentesis_a VALOR P_coma VALOR Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLA",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PARAM ::= T_dato Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PARAM ::= T_dato Identificador PARAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FUNCION ::= Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUNCION ::= Identificador Parentesis_a PARAM Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MAN ::= Escalar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAN",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MAN ::= Dibujar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAN",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MAN ::= Mover 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAN",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OBJETO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OBJETO ::= Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // UNIR ::= Unir Parentesis_a OBJETO Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNIR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MANIPULAR ::= Rotar Parentesis_a Todo P_coma VALOR Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MANIPULAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MANIPULAR ::= MAN Parentesis_a Todo P_coma VALOR P_coma VALOR Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MANIPULAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MANIPULAR ::= Rotar Parentesis_a VALOR P_coma VALOR Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MANIPULAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // MANIPULAR ::= MAN Parentesis_a VALOR P_coma VALOR P_coma VALOR Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MANIPULAR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ARREGLO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARREGLO ::= Identificador P_coma ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IND ::= Indice Parentesis_a VALOR P_coma VALOR Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IND",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FIG ::= Trazar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIG",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FIG ::= Cir 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIG",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FIG ::= Tria 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIG",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FIG ::= Cuad 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIG",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALOR ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FIGURA ::= T_dato Identificador Igual FIG Parentesis_a VALOR P_coma VALOR P_coma VALOR P_coma VALOR Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIGURA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Funcion Identificador Parentesis_a VALOR Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Funcion Identificador Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Array T_dato Identificador Igual Corchete_a ARREGLO Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= TABLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA TABLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= MANIPULAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA MANIPULAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= IND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA IND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= FIGURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA FIGURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

