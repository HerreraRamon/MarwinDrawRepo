
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 02 13:53:10 CST 2023
//----------------------------------------------------

package programa;

import java_cup.runtime.Symbol;
import java.util.HashMap;
import java.io.*;
import programa.TablaSimbolos.*;
import programa.TablaSimbolos.Simbolo;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 02 13:53:10 CST 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\002\010\000\002\002" +
    "\011\000\002\002\012\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\004\000" +
    "\002\004\005\000\002\004\007\000\002\004\010\000\002" +
    "\004\011\000\002\004\012\000\002\004\007\000\002\004" +
    "\010\000\002\006\011\000\002\011\003\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\006\000" +
    "\002\011\007\000\002\007\015\000\002\010\011\000\002" +
    "\012\012\000\002\012\011\000\002\013\020\000\002\005" +
    "\005\000\002\005\004\000\002\005\004\000\002\005\002" +
    "\000\002\015\003\000\002\015\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\016\011\000\002\017\005\000\002\017\003\000\002\017" +
    "\002\000\002\020\013\000\002\020\011\000\002\020\013" +
    "\000\002\020\011\000\002\025\006\000\002\026\004\000" +
    "\002\026\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\022\011\000\002\022\010\000\002\023" +
    "\005\000\002\023\004\000\002\024\011\000\002\027\005" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\004\000\002\031\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\006\007\006\036\004\001\002\000\004\030" +
    "\301\001\002\000\004\002\300\001\002\000\004\036\007" +
    "\001\002\000\004\030\010\001\002\000\004\031\011\001" +
    "\002\000\004\032\012\001\002\000\034\003\036\006\024" +
    "\010\030\013\035\015\015\043\031\044\041\045\034\046" +
    "\037\050\033\051\026\054\032\055\016\001\002\000\034" +
    "\006\ufff4\010\ufff4\013\ufff4\015\ufff4\033\ufff4\043\ufff4\044" +
    "\ufff4\045\ufff4\046\ufff4\050\ufff4\051\ufff4\054\ufff4\055\ufff4" +
    "\001\002\000\004\030\261\001\002\000\004\030\226\001" +
    "\002\000\004\030\220\001\002\000\034\006\024\010\030" +
    "\013\035\015\015\033\200\043\031\044\041\045\034\046" +
    "\037\050\033\051\026\054\032\055\016\001\002\000\034" +
    "\006\ufffc\010\ufffc\013\ufffc\015\ufffc\033\ufffc\043\ufffc\044" +
    "\ufffc\045\ufffc\046\ufffc\050\ufffc\051\ufffc\054\ufffc\055\ufffc" +
    "\001\002\000\034\006\ufffa\010\ufffa\013\ufffa\015\ufffa\033" +
    "\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\050\ufffa\051\ufffa" +
    "\054\ufffa\055\ufffa\001\002\000\034\006\ufff8\010\ufff8\013" +
    "\ufff8\015\ufff8\033\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8" +
    "\050\ufff8\051\ufff8\054\ufff8\055\ufff8\001\002\000\034\006" +
    "\uffee\010\uffee\013\uffee\015\uffee\033\uffee\043\uffee\044\uffee" +
    "\045\uffee\046\uffee\050\uffee\051\uffee\054\uffee\055\uffee\001" +
    "\002\000\004\005\154\001\002\000\034\006\ufff2\010\ufff2" +
    "\013\ufff2\015\ufff2\033\ufff2\043\ufff2\044\ufff2\045\ufff2\046" +
    "\ufff2\050\ufff2\051\ufff2\054\ufff2\055\ufff2\001\002\000\004" +
    "\005\145\001\002\000\034\006\ufff0\010\ufff0\013\ufff0\015" +
    "\ufff0\033\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\050\ufff0" +
    "\051\ufff0\054\ufff0\055\ufff0\001\002\000\004\005\135\001" +
    "\002\000\004\030\127\001\002\000\004\006\115\001\002" +
    "\000\004\030\uffc2\001\002\000\004\030\100\001\002\000" +
    "\004\030\044\001\002\000\006\033\042\053\043\001\002" +
    "\000\004\030\uffc1\001\002\000\034\006\ufff6\010\ufff6\013" +
    "\ufff6\015\ufff6\033\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\050\ufff6\051\ufff6\054\ufff6\055\ufff6\001\002\000\004\030" +
    "\uffc3\001\002\000\034\006\uffec\010\uffec\013\uffec\015\uffec" +
    "\033\uffec\043\uffec\044\uffec\045\uffec\046\uffec\050\uffec\051" +
    "\uffec\054\uffec\055\uffec\001\002\000\034\006\uffed\010\uffed" +
    "\013\uffed\015\uffed\033\uffed\043\uffed\044\uffed\045\uffed\046" +
    "\uffed\050\uffed\051\uffed\054\uffed\055\uffed\001\002\000\006" +
    "\005\047\027\046\001\002\000\004\031\060\001\002\000" +
    "\006\031\uffe3\053\uffe3\001\002\000\004\024\050\001\002" +
    "\000\012\004\051\005\054\012\052\027\053\001\002\000" +
    "\006\031\uffe1\053\uffe1\001\002\000\006\005\056\012\055" +
    "\001\002\000\006\031\uffe2\053\uffe2\001\002\000\006\031" +
    "\uffe0\053\uffe0\001\002\000\006\031\uffdf\053\uffdf\001\002" +
    "\000\004\012\057\001\002\000\006\031\uffde\053\uffde\001" +
    "\002\000\004\032\061\001\002\000\034\003\036\006\024" +
    "\010\030\013\035\015\015\043\031\044\041\045\034\046" +
    "\037\050\033\051\026\054\032\055\016\001\002\000\034" +
    "\006\024\010\030\013\035\015\015\033\066\043\031\044" +
    "\041\045\034\046\037\050\033\051\026\054\032\055\016" +
    "\001\002\000\034\006\ufff5\010\ufff5\013\ufff5\015\ufff5\033" +
    "\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\050\ufff5\051\ufff5" +
    "\054\ufff5\055\ufff5\001\002\000\034\006\ufffd\010\ufffd\013" +
    "\ufffd\015\ufffd\033\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd" +
    "\050\ufffd\051\ufffd\054\ufffd\055\ufffd\001\002\000\034\006" +
    "\ufffb\010\ufffb\013\ufffb\015\ufffb\033\ufffb\043\ufffb\044\ufffb" +
    "\045\ufffb\046\ufffb\050\ufffb\051\ufffb\054\ufffb\055\ufffb\001" +
    "\002\000\036\006\uffe4\010\uffe4\013\uffe4\014\074\015\uffe4" +
    "\033\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\050\uffe4\051" +
    "\uffe4\054\uffe4\055\uffe4\001\002\000\034\006\ufff9\010\ufff9" +
    "\013\ufff9\015\ufff9\033\ufff9\043\ufff9\044\ufff9\045\ufff9\046" +
    "\ufff9\050\ufff9\051\ufff9\054\ufff9\055\ufff9\001\002\000\034" +
    "\006\uffef\010\uffef\013\uffef\015\uffef\033\uffef\043\uffef\044" +
    "\uffef\045\uffef\046\uffef\050\uffef\051\uffef\054\uffef\055\uffef" +
    "\001\002\000\034\006\ufff3\010\ufff3\013\ufff3\015\ufff3\033" +
    "\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\050\ufff3\051\ufff3" +
    "\054\ufff3\055\ufff3\001\002\000\034\006\ufff1\010\ufff1\013" +
    "\ufff1\015\ufff1\033\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1" +
    "\050\ufff1\051\ufff1\054\ufff1\055\ufff1\001\002\000\034\006" +
    "\ufff7\010\ufff7\013\ufff7\015\ufff7\033\ufff7\043\ufff7\044\ufff7" +
    "\045\ufff7\046\ufff7\050\ufff7\051\ufff7\054\ufff7\055\ufff7\001" +
    "\002\000\004\032\075\001\002\000\034\003\036\006\024" +
    "\010\030\013\035\015\015\043\031\044\041\045\034\046" +
    "\037\050\033\051\026\054\032\055\016\001\002\000\034" +
    "\006\024\010\030\013\035\015\015\033\077\043\031\044" +
    "\041\045\034\046\037\050\033\051\026\054\032\055\016" +
    "\001\002\000\034\006\uffdd\010\uffdd\013\uffdd\015\uffdd\033" +
    "\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\050\uffdd\051\uffdd" +
    "\054\uffdd\055\uffdd\001\002\000\010\004\101\005\104\052" +
    "\102\001\002\000\006\031\uffd3\053\uffd3\001\002\000\004" +
    "\053\111\001\002\000\004\053\105\001\002\000\006\031" +
    "\uffd4\053\uffd4\001\002\000\006\004\101\005\104\001\002" +
    "\000\004\031\107\001\002\000\004\053\110\001\002\000" +
    "\034\006\uffc9\010\uffc9\013\uffc9\015\uffc9\033\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\050\uffc9\051\uffc9\054\uffc9\055" +
    "\uffc9\001\002\000\006\004\101\005\104\001\002\000\004" +
    "\031\113\001\002\000\004\053\114\001\002\000\034\006" +
    "\uffc7\010\uffc7\013\uffc7\015\uffc7\033\uffc7\043\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\050\uffc7\051\uffc7\054\uffc7\055\uffc7\001" +
    "\002\000\004\005\116\001\002\000\004\016\117\001\002" +
    "\000\004\034\120\001\002\000\006\005\121\035\uffcb\001" +
    "\002\000\006\035\uffcc\053\125\001\002\000\004\035\123" +
    "\001\002\000\004\053\124\001\002\000\034\006\uffe7\010" +
    "\uffe7\013\uffe7\015\uffe7\033\uffe7\043\uffe7\044\uffe7\045\uffe7" +
    "\046\uffe7\050\uffe7\051\uffe7\054\uffe7\055\uffe7\001\002\000" +
    "\006\005\121\035\uffcb\001\002\000\004\035\uffcd\001\002" +
    "\000\006\004\101\005\104\001\002\000\004\053\131\001" +
    "\002\000\006\004\101\005\104\001\002\000\004\031\133" +
    "\001\002\000\004\053\134\001\002\000\034\006\uffce\010" +
    "\uffce\013\uffce\015\uffce\033\uffce\043\uffce\044\uffce\045\uffce" +
    "\046\uffce\050\uffce\051\uffce\054\uffce\055\uffce\001\002\000" +
    "\004\016\136\001\002\000\004\012\137\001\002\000\006" +
    "\005\141\012\140\001\002\000\004\053\144\001\002\000" +
    "\004\012\142\001\002\000\004\053\143\001\002\000\034" +
    "\006\uffe8\010\uffe8\013\uffe8\015\uffe8\033\uffe8\043\uffe8\044" +
    "\uffe8\045\uffe8\046\uffe8\050\uffe8\051\uffe8\054\uffe8\055\uffe8" +
    "\001\002\000\034\006\uffe9\010\uffe9\013\uffe9\015\uffe9\033" +
    "\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\050\uffe9\051\uffe9" +
    "\054\uffe9\055\uffe9\001\002\000\004\030\146\001\002\000" +
    "\010\004\101\005\104\031\150\001\002\000\004\031\152" +
    "\001\002\000\004\053\151\001\002\000\034\006\uffe6\010" +
    "\uffe6\013\uffe6\015\uffe6\033\uffe6\043\uffe6\044\uffe6\045\uffe6" +
    "\046\uffe6\050\uffe6\051\uffe6\054\uffe6\055\uffe6\001\002\000" +
    "\004\053\153\001\002\000\034\006\uffe5\010\uffe5\013\uffe5" +
    "\015\uffe5\033\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\050" +
    "\uffe5\051\uffe5\054\uffe5\055\uffe5\001\002\000\006\016\156" +
    "\053\155\001\002\000\034\006\uffeb\010\uffeb\013\uffeb\015" +
    "\uffeb\033\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\050\uffeb" +
    "\051\uffeb\054\uffeb\055\uffeb\001\002\000\014\004\157\037" +
    "\163\040\164\041\161\042\160\001\002\000\004\053\177" +
    "\001\002\000\004\030\uffcf\001\002\000\004\030\uffd0\001" +
    "\002\000\004\030\165\001\002\000\004\030\uffd2\001\002" +
    "\000\004\030\uffd1\001\002\000\006\004\101\005\104\001" +
    "\002\000\004\053\167\001\002\000\006\004\101\005\104" +
    "\001\002\000\004\053\171\001\002\000\006\004\101\005" +
    "\104\001\002\000\004\053\173\001\002\000\006\004\101" +
    "\005\104\001\002\000\004\031\175\001\002\000\004\053" +
    "\176\001\002\000\034\006\uffd9\010\uffd9\013\uffd9\015\uffd9" +
    "\033\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\050\uffd9\051" +
    "\uffd9\054\uffd9\055\uffd9\001\002\000\034\006\uffea\010\uffea" +
    "\013\uffea\015\uffea\033\uffea\043\uffea\044\uffea\045\uffea\046" +
    "\uffea\050\uffea\051\uffea\054\uffea\055\uffea\001\002\000\004" +
    "\005\202\001\002\000\004\002\ufffe\001\002\000\004\030" +
    "\203\001\002\000\006\006\204\031\206\001\002\000\004" +
    "\005\216\001\002\000\004\031\212\001\002\000\004\032" +
    "\207\001\002\000\034\003\036\006\024\010\030\013\035" +
    "\015\015\043\031\044\041\045\034\046\037\050\033\051" +
    "\026\054\032\055\016\001\002\000\034\006\024\010\030" +
    "\013\035\015\015\033\211\043\031\044\041\045\034\046" +
    "\037\050\033\051\026\054\032\055\016\001\002\000\004" +
    "\002\uffbf\001\002\000\004\032\213\001\002\000\034\003" +
    "\036\006\024\010\030\013\035\015\015\043\031\044\041" +
    "\045\034\046\037\050\033\051\026\054\032\055\016\001" +
    "\002\000\034\006\024\010\030\013\035\015\015\033\215" +
    "\043\031\044\041\045\034\046\037\050\033\051\026\054" +
    "\032\055\016\001\002\000\004\002\uffc0\001\002\000\006" +
    "\006\204\031\uffbd\001\002\000\004\031\uffbe\001\002\000" +
    "\006\004\101\005\104\001\002\000\004\053\222\001\002" +
    "\000\006\004\101\005\104\001\002\000\004\031\224\001" +
    "\002\000\004\053\225\001\002\000\034\006\uffbc\010\uffbc" +
    "\013\uffbc\015\uffbc\033\uffbc\043\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\050\uffbc\051\uffbc\054\uffbc\055\uffbc\001\002\000\006" +
    "\005\230\006\231\001\002\000\004\031\255\001\002\000" +
    "\004\016\247\001\002\000\004\005\232\001\002\000\004" +
    "\016\233\001\002\000\004\004\234\001\002\000\004\053" +
    "\235\001\002\000\006\005\047\027\046\001\002\000\004" +
    "\053\237\001\002\000\010\005\242\026\241\031\uffd5\001" +
    "\002\000\004\031\uffdb\001\002\000\004\005\246\001\002" +
    "\000\006\025\243\026\244\001\002\000\004\004\245\001" +
    "\002\000\004\031\uffd7\001\002\000\004\031\uffd8\001\002" +
    "\000\004\031\uffd6\001\002\000\004\004\250\001\002\000" +
    "\004\053\251\001\002\000\006\005\047\027\046\001\002" +
    "\000\004\053\253\001\002\000\010\005\242\026\241\031" +
    "\uffd5\001\002\000\004\031\uffda\001\002\000\004\032\256" +
    "\001\002\000\034\003\036\006\024\010\030\013\035\015" +
    "\015\043\031\044\041\045\034\046\037\050\033\051\026" +
    "\054\032\055\016\001\002\000\034\006\024\010\030\013" +
    "\035\015\015\033\260\043\031\044\041\045\034\046\037" +
    "\050\033\051\026\054\032\055\016\001\002\000\034\006" +
    "\uffdc\010\uffdc\013\uffdc\015\uffdc\033\uffdc\043\uffdc\044\uffdc" +
    "\045\uffdc\046\uffdc\050\uffdc\051\uffdc\054\uffdc\055\uffdc\001" +
    "\002\000\010\004\101\005\104\052\262\001\002\000\004" +
    "\053\272\001\002\000\004\053\264\001\002\000\006\004" +
    "\101\005\104\001\002\000\004\053\266\001\002\000\006" +
    "\004\101\005\104\001\002\000\004\031\270\001\002\000" +
    "\004\053\271\001\002\000\034\006\uffca\010\uffca\013\uffca" +
    "\015\uffca\033\uffca\043\uffca\044\uffca\045\uffca\046\uffca\050" +
    "\uffca\051\uffca\054\uffca\055\uffca\001\002\000\006\004\101" +
    "\005\104\001\002\000\004\053\274\001\002\000\006\004" +
    "\101\005\104\001\002\000\004\031\276\001\002\000\004" +
    "\053\277\001\002\000\034\006\uffc8\010\uffc8\013\uffc8\015" +
    "\uffc8\033\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\050\uffc8" +
    "\051\uffc8\054\uffc8\055\uffc8\001\002\000\004\002\001\001" +
    "\002\000\004\031\302\001\002\000\004\032\303\001\002" +
    "\000\034\003\036\006\024\010\030\013\035\015\015\043" +
    "\031\044\041\045\034\046\037\050\033\051\026\054\032" +
    "\055\016\001\002\000\034\006\024\010\030\013\035\015" +
    "\015\033\305\043\031\044\041\045\034\046\037\050\033" +
    "\051\026\054\032\055\016\001\002\000\006\002\000\005" +
    "\202\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\016\004\017\006" +
    "\020\007\021\010\037\013\012\016\024\020\026\021\013" +
    "\024\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\063\006\064" +
    "\007\066\010\072\013\062\016\070\020\071\021\013\024" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\061\004\017" +
    "\006\020\007\021\010\037\013\012\016\024\020\026\021" +
    "\013\024\022\001\001\000\024\004\063\006\064\007\066" +
    "\010\072\013\062\016\070\020\071\021\013\024\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\075\004\017\006\020\007\021\010" +
    "\037\013\012\016\024\020\026\021\013\024\022\001\001" +
    "\000\024\004\063\006\064\007\066\010\072\013\062\016" +
    "\070\020\071\021\013\024\067\001\001\000\002\001\001" +
    "\000\004\015\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\125\001\001\000\002\001\001\000\004" +
    "\015\127\001\001\000\002\001\001\000\004\015\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\165" +
    "\001\001\000\002\001\001\000\004\015\167\001\001\000" +
    "\002\001\001\000\004\015\171\001\001\000\002\001\001" +
    "\000\004\015\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\207\004\017\006\020\007\021\010" +
    "\037\013\012\016\024\020\026\021\013\024\022\001\001" +
    "\000\024\004\063\006\064\007\066\010\072\013\062\016" +
    "\070\020\071\021\013\024\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\213\004\017\006\020\007" +
    "\021\010\037\013\012\016\024\020\026\021\013\024\022" +
    "\001\001\000\024\004\063\006\064\007\066\010\072\013" +
    "\062\016\070\020\071\021\013\024\067\001\001\000\002" +
    "\001\001\000\004\023\216\001\001\000\002\001\001\000" +
    "\004\015\220\001\001\000\002\001\001\000\004\015\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\235\001\001\000\002" +
    "\001\001\000\004\005\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\251\001\001\000\002" +
    "\001\001\000\004\005\253\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\256\004\017\006\020\007\021" +
    "\010\037\013\012\016\024\020\026\021\013\024\022\001" +
    "\001\000\024\004\063\006\064\007\066\010\072\013\062" +
    "\016\070\020\071\021\013\024\067\001\001\000\002\001" +
    "\001\000\004\015\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\264\001\001\000\002\001\001\000" +
    "\004\015\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\272\001\001\000\002\001" +
    "\001\000\004\015\274\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\303\004\017\006\020" +
    "\007\021\010\037\013\012\016\024\020\026\021\013\024" +
    "\022\001\001\000\024\004\063\006\064\007\066\010\072" +
    "\013\062\016\070\020\071\021\013\024\067\001\001\000" +
    "\004\022\305\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    

    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
        Pantalla.algo("Error de sintaxis. El error se encuentra en: " +s.value+ " Linea:    " +(s.right+1));
    }

    public Symbol getS(){
        
        return this.s;
    }
        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        this.s = s;
        Pantalla.algo("Error R de sintaxis. El error se encuentra en: " +s.value+ "Linea:   " + (s.left+1));}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    private TablaSimbolos tabla= new TablaSimbolos();
    

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ERRORES ::= error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ERRORES ::= error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ERRORES ::= TABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ERRORES ::= MANIPULATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ERRORES ::= IND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ERRORES ::= FIGURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ERRORES ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ERRORES ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ERRORES ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ERRORES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERADOR ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERADOR ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERADOR ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERADOR ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERADOR ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= Identificador OPERADOR Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TABLE ::= Table Parentesis_a VALOR P_coma VALOR Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TABLE",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAM ::= T_dato Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARAM ::= T_dato Identificador PARAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNCION ::= Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCION ::= Identificador Parentesis_a PARAM Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MAN ::= Resize 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MAN ::= Draw 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MAN ::= Move 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OBJETO ::= Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Simbolo si;
        if ((si = tabla.getSymbol(id)) == null)Pantalla.errorSemantico("Error de semantica no existe  la variable "+id);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OBJETO ::= Identificador P_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 Simbolo si;
        if ((si = tabla.getSymbol(id)) == null)Pantalla.errorSemantico("Error de semantica no existe  la variable "+id);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OBJETO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // UNIR ::= Link Parentesis_a OBJETO Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UNIR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MANIPULATE ::= Rotate Parentesis_a All P_coma VALOR Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MANIPULATE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MANIPULATE ::= MAN Parentesis_a All P_coma VALOR P_coma VALOR Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MANIPULATE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MANIPULATE ::= Rotate Parentesis_a VALOR P_coma VALOR Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MANIPULATE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MANIPULATE ::= MAN Parentesis_a VALOR P_coma VALOR P_coma VALOR Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MANIPULATE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARREGLO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARREGLO ::= Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Simbolo si;
        if ((si = tabla.getSymbol(id)) == null)Pantalla.errorSemantico("Error de semantica no existe  la variable "+id);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ARREGLO ::= Identificador P_coma ARREGLO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 Simbolo si;
        if ((si = tabla.getSymbol(id)) == null)Pantalla.errorSemantico("Error de semantica no existe  la variable "+id);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IND ::= Index Parentesis_a VALOR P_coma VALOR Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IND",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FIG ::= Trazar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIG",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FIG ::= Circ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIG",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FIG ::= Tria 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIG",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FIG ::= Squa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIG",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VALOR ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VALOR ::= Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Simbolo si;
        if ((si = tabla.getSymbol(id)) == null)Pantalla.errorSemantico("Error de semantica no existe  la variable "+id);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_FOR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Simbolo si;
        if ((si = tabla.getSymbol(id)) == null)Pantalla.errorSemantico("Error de semantica no existe  la variable "+id);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 Simbolo si;
        if ((si = tabla.getSymbol(id)) == null)Pantalla.errorSemantico("Error de semantica no existe  la variable "+id);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 Simbolo si;
        if ((si = tabla.getSymbol(id)) == null)Pantalla.errorSemantico("Error de semantica no existe  la variable "+id);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FIGURE ::= T_dato Identificador Igual FIG Parentesis_a VALOR P_coma VALOR P_coma VALOR P_coma VALOR Parentesis_c P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).value;
		
        Simbolo si;
        if ((si = tabla.getSymbol(e)) == null)tabla.addSymbol(e,t,"");
        else Pantalla.errorSemantico("Error de semantica ya existe la variable "+e);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIGURE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 Simbolo si;
        if ((si = tabla.getSymbol(id)) == null)Pantalla.errorSemantico("Error de semantica no existe  la variable "+id);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
        Simbolo si;
        if ((si = tabla.getSymbol(e)) == null)tabla.addSymbol(e,t,n);
        else Pantalla.errorSemantico("Error de semantica ya existe la variable "+e);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 Simbolo si;
        if ((si = tabla.getSymbol(id)) == null)Pantalla.errorSemantico("Error de semantica no existe  la variable "+id);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Simbolo si;
        if ((si = tabla.getSymbol(e1)) == null)Pantalla.errorSemantico("Error de semantica no existe  la variable "+e1);
        if ((si = tabla.getSymbol(e2)) == null)Pantalla.errorSemantico("Error de semantica no existe  la variable "+e2);

    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Simbolo si;
        if ((si = tabla.getSymbol(id)) == null)Pantalla.errorSemantico("Error de semantica no existe  la variable "+id);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 Simbolo si;
        if ((si = tabla.getSymbol(id)) == null)Pantalla.errorSemantico("Error de semantica no existe la variable "+id);
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Funcion Identificador Parentesis_a VALOR Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Funcion Identificador Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Array T_dato Identificador Igual Corchete_a ARREGLO Corchete_c P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		  Simbolo si;
        if ((si = tabla.getSymbol(e)) == null)tabla.addSymbol(e,t,"");
        else Pantalla.errorSemantico("Error de semantica ya existe la variable "+e);    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		  Simbolo si;
        if ((si = tabla.getSymbol(e)) == null)tabla.addSymbol(e,t,n);
        else Pantalla.errorSemantico("Error de semantica ya existe la variable "+e);    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		  Simbolo si;
        if ((si = tabla.getSymbol(e)) == null)tabla.addSymbol(e,t,"");
        else Pantalla.errorSemantico("Error de semantica ya existe la variable "+e);    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		  Simbolo si;
        if ((si = tabla.getSymbol(e)) == null)tabla.addSymbol(e,t,n);
        else Pantalla.errorSemantico("Error de semantica ya existe la variable "+e);    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		  Simbolo si;
        if ((si = tabla.getSymbol(e)) == null)tabla.addSymbol(e,t,"");
        else Pantalla.errorSemantico("Error de semantica ya existe la variable "+e);    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= TABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA TABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= MANIPULATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA MANIPULATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= IND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA IND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= FIGURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA FIGURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;
		 tabla.imprimir(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

